// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VARkit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ARKit
import AVFoundation
import AVKit
import Foundation
import SceneKit
import Swift
import SwiftPhotoGallery
import UIKit
import ZIPFoundation
import _Concurrency
import _StringProcessing
public enum VARError : Swift.Error {
  case alreadySynching
  case networkError(error: any Swift.Error)
  case serverError
  case parsingError(error: any Swift.Error)
  case fileError(error: any Swift.Error)
  case alreadyUpToDate
}
public enum VARStatus {
  case updateStarted(firstTime: Swift.Bool)
  case downloadStarted
  case downloadProgress(percentage: Swift.Float)
  case downloadCompleted
  case updateCompleted
  case updateFailed(error: VARkit.VARError)
  case alreadyUpToDate
}
public protocol VARStatusDelegate : AnyObject {
  func statusDidChange(status: VARkit.VARStatus)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class VARViewController : UIKit.UIViewController, ARKit.ARSCNViewDelegate, VARkit.VARStatusDelegate, SwiftPhotoGallery.SwiftPhotoGalleryDataSource, SwiftPhotoGallery.SwiftPhotoGalleryDelegate {
  @_Concurrency.MainActor(unsafe) open var appKey: Swift.String!
  @_Concurrency.MainActor(unsafe) open var isStaging: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var isOldCode: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersHomeIndicatorAutoHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func refresh()
  @_Concurrency.MainActor(unsafe) open func cancelSync()
  @_Concurrency.MainActor(unsafe) open func statusDidChange(status: VARkit.VARStatus)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc public func numberOfImagesInGallery(gallery: SwiftPhotoGallery.SwiftPhotoGallery) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func imageInGallery(gallery: SwiftPhotoGallery.SwiftPhotoGallery, forIndex: Swift.Int) -> UIKit.UIImage?
  @_Concurrency.MainActor(unsafe) @objc public func galleryDidTapToClose(gallery: SwiftPhotoGallery.SwiftPhotoGallery)
  @_Concurrency.MainActor(unsafe) @objc public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didRemove node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor(unsafe) @objc public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didUpdate node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor(unsafe) @objc public func renderer(_ renderer: any SceneKit.SCNSceneRenderer, didAdd node: SceneKit.SCNNode, for anchor: ARKit.ARAnchor)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VARkit.VARViewController : ARKit.ARSessionDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, cameraDidChangeTrackingState camera: ARKit.ARCamera)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func session(_ session: ARKit.ARSession, didFailWithError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionWasInterrupted(_ session: ARKit.ARSession)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionInterruptionEnded(_ session: ARKit.ARSession)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func sessionShouldAttemptRelocalization(_ session: ARKit.ARSession) -> Swift.Bool
}
@objc public class ChromaKeyMaterial : SceneKit.SCNMaterial {
  public var backgroundColor: UIKit.UIColor {
    get
    set
  }
  public var thresholdSensitivity: Swift.Float {
    get
    set
  }
  public var smoothing: Swift.Float {
    get
    set
  }
  public init(backgroundColor: UIKit.UIColor = .green, thresholdSensitivity: Swift.Float = 0.50, smoothing: Swift.Float = 0.001)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
